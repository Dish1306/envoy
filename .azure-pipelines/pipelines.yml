trigger:
  branches:
    include:
      - "master"
      - "release/v*"
  tags:
    include:
      - "v*"

# PR build config is manually overridden in Azure pipelines UI with different secrets
pr: none

jobs:
  - job: format
    dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel.
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - task: Cache@2
        inputs:
          key: "format | ./WORKSPACE | **/*.bzl"
          path: $(Build.StagingDirectory)/repository_cache
        continueOnError: true

      - script: ci/run_envoy_docker.sh 'ci/check_and_fix_format.sh'
        workingDirectory: $(Build.SourcesDirectory)
        env:
          ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
          BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
          BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
          GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
        displayName: "Run check format scripts"

      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: "$(Build.StagingDirectory)/fix_format.diff"
          artifactName: format
        condition: failed()

  - job: release
    displayName: "Linux-x64 release"
    dependsOn: ["format"]
    # For master builds, continue even if format fails
    condition: and(not(canceled()), or(succeeded(), ne(variables['Build.Reason'], 'PullRequest')))
    timeoutInMinutes: 360
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - template: bazel.yml
        parameters:
          ciTarget: bazel.release

  - job: bazel
    displayName: "Linux-x64"
    dependsOn: ["release"]
    # For master builds, continue even if format fails
    condition: and(not(canceled()), or(succeeded(), ne(variables['Build.Reason'], 'PullRequest')))
    strategy:
      maxParallel: 3
      matrix:
        gcc:
          CI_TARGET: "bazel.gcc"
        gcc_cross_aarch64:
          CI_TARGET: "bazel.gcc.cross_aarch64"
        clang_tidy:
          CI_TARGET: "bazel.clang_tidy"
        asan:
          CI_TARGET: "bazel.asan"
        tsan:
          CI_TARGET: "bazel.tsan"
        compile_time_options:
          CI_TARGET: "bazel.compile_time_options"
    timeoutInMinutes: 360
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - template: bazel.yml
        parameters:
          ciTarget: $(CI_TARGET)
        

  - job: Windows
    dependsOn: ["format"]
    timeoutInMinutes: 360
    pool:
      vmImage: "windows-latest"
    steps:
      - bash: ci/run_envoy_docker_windows.sh ci/windows_ci_steps.sh
        displayName: "Run Windows CI"
        env:
          ENVOY_RBE: "true"
          BAZEL_BUILD_EXTRA_OPTIONS: "--config=remote-ci --config=remote-msvc-cl --jobs=$(RbeJobs)"
          BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
          BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
          GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
